import pyparsing as pp

elements = map(pp.Literal, [ 'H', 'C', 'N', 'O', 'F', 'S', 'Br', 'Cl' ])

bond_type = (pp.Empty() ^
             pp.Literal('-') ^
             pp.Literal('\\') ^
             pp.Literal('/') ^
             pp.Literal('=') ^
             pp.Literal('#') ^
             pp.Literal('$')
            )

charge = (pp.ZeroOrMore('+') ^
          pp.ZeroOrMore('-') ^
          ((pp.Literal('+') ^ pp.Literal('-')) +
           pp.Word(pp.nums))
         )

atom = pp.Or([elements,
              pp.Literal('[').suppress() +
                  elements + charge +
              pp.Literal(']').suppress()],
             True
             )
# substituent = pp.Forward()

# full_atom = (atom +
#              pp.Or([pp.OneOrMore(substituent),
#                    pp.Empty()],
#                    True
#              ))

# atom_chain = full_atom + pp.ZeroOrMore(bond_type + full_atom)


# substituent_num = (pp.Word(pp.nums, exact=1) ^
#                    (pp.Literal('%').suppress() + pp.Word(pp.nums))
#                   )

# substituent <<= (pp.Group(pp.Literal('(').suppress() +
#                           bond_type + atom_chain +
#                           pp.Literal(')').suppress()) ^
#                  substituent_num)


# smiles = (pp.StringStart() +
#           pp.Group(atom_chain) + pp.ZeroOrMore(pp.Literal('.').suppress() + pp.Group(atom_chain)) +
#           pp.StringEnd())

# tests = [
#     'N#N',
#     'CN=C=O',
#     'OC[C@@H](O1)[C@@H](O)[C@H](O)[C@@H](O)[C@@H](O)1',
#     'CC[C@H](O1)CC[C@@]12CCCO2',
#     'CC(C)[C@@]12C[C@@H]1[C@@H](C)C(=O)C2',
#     '[2H]C(Cl)(Cl)Cl'
# ]
          
# for test in tests:
#     print(test)
#     print(smiles.parseString(test))
